
(set-info :status unknown)
(declare-datatypes ((Proc 0)) (((pay) (unlock))))
 (declare-fun w_0 () Int)
(declare-fun b_1 () Bool)
(declare-fun t_b_0_0 () Bool)
(declare-fun aw_0_1 () Int)
(declare-fun aw_1_1 () Int)
(declare-fun aw_0_0 () Int)
(declare-fun aw_1_0 () Int)
(declare-fun w_1 () Int)
(declare-fun b_0 () Bool)
(declare-fun xn_0 () Int)
(declare-fun xa_0 () Int)
(declare-fun b_2 () Bool)
(declare-fun t_b_1_0 () Bool)
(declare-fun t_aw_1_0_1 () Int)
(declare-fun aw_2_1 () Int)
(declare-fun t_aw_1_0_0 () Int)
(declare-fun aw_2_0 () Int)
(declare-fun t_w_1_0 () Int)
(declare-fun w_2 () Int)
(declare-fun pay_amount_1 () Int)
(declare-fun xa_1 () Int)
(declare-fun xn_1 () Int)
(declare-fun f_1 () Proc)
(declare-fun block_num_1 () Int)
(declare-fun block_num_2 () Int)
(assert
 (>= w_0 0))
(assert
 (let (($x108 (= t_b_0_0 b_1)))
 (let (($x103 (= aw_1_1 aw_0_1)))
 (let (($x102 (= aw_1_0 aw_0_0)))
 (let (($x104 (and $x102 $x103)))
 (let (($x101 (= w_1 w_0)))
 (let (($x109 (and $x101 $x104 $x108)))
 (let (($x99 (= xn_0 0)))
 (let (($x100 (not $x99)))
 (let (($x112 (ite $x100 (and $x101 $x104 (= b_0 b_1)) (and (and (= t_b_0_0 false) $x109) $x109))))
 (and (and (>= xa_0 0) (<= xa_0 1) (>= xn_0 0)) (and (>= aw_0_0 0) (>= aw_0_1 0)) $x112)))))))))))
(assert
 (let (($x139 (= t_b_1_0 b_2)))
 (let (($x166 (= w_2 t_w_1_0)))
 (let (($x170 (and $x166 (and (= aw_2_0 t_aw_1_0_0) (= aw_2_1 t_aw_1_0_1)) $x139)))
 (let (($x162 (= t_aw_1_0_1 aw_1_1)))
 (let (($x159 (= xa_1 1)))
 (let (($x157 (= t_aw_1_0_0 aw_1_0)))
 (let (($x154 (= xa_1 0)))
 (let (($x164 (and (ite $x154 (= t_aw_1_0_0 (+ aw_1_0 pay_amount_1)) $x157) (ite $x159 (= t_aw_1_0_1 (+ aw_1_1 pay_amount_1)) $x162))))
 (let (($x134 (= b_1 b_2)))
 (let (($x132 (= aw_2_1 aw_1_1)))
 (let (($x131 (= aw_2_0 aw_1_0)))
 (let (($x133 (and $x131 $x132)))
 (let (($x130 (= w_2 w_1)))
 (let (($x135 (and $x130 $x133 $x134)))
 (let (($x172 (ite (not (>= pay_amount_1 0)) $x135 (and (and (= t_w_1_0 (- w_1 pay_amount_1)) $x164) $x170))))
 (let (($x176 (ite (not (and (<= pay_amount_1 w_1) b_1)) $x135 (and (and (and (= t_b_1_0 false) $x172) $x170)))))
 (let (($x128 (= xn_1 0)))
 (let (($x129 (not $x128)))
 (let (($x136 (not b_1)))
 (let (($x137 (not $x136)))
 (let (($x144 (and (ite $x137 $x135 (and (and (= t_b_1_0 true) (and $x130 $x133 $x139)))))))
 (let (($x127 (= f_1 unlock)))
 (let (($x124 (>= aw_1_1 0)))
 (let (($x123 (>= aw_1_0 0)))
 (let (($x125 (and $x123 $x124)))
 (and (and (>= xa_1 0) (<= xa_1 1) (>= xn_1 0)) $x125 (>= block_num_2 block_num_1) (ite $x127 (ite $x129 $x135 $x144) (ite $x129 $x135 (and $x176))))))))))))))))))))))))))))))
(assert
 (let (($x278 (exists ((xa_q Int) )(let (($x274 (forall ((xn_q0 Int) (f_q0 Proc) (wq0 Int) (awq0_0 Int) (awq0_1 Int) (t_wq0_0 Int) (t_awq0_0_0 Int) (t_awq0_0_1 Int) (block_num_q0 Int) (pay_amount0_q Int) (bq0 Bool) (t_bq0_0 Bool) (xn_q1 Int) (f_q1 Proc) (wq1 Int) (awq1_0 Int) (awq1_1 Int) (t_wq1_0 Int) (t_awq1_0_0 Int) (t_awq1_0_1 Int) (block_num_q1 Int) (pay_amount1_q Int) (bq1 Bool) (t_bq1_0 Bool) )(let (($x319 (and (or (and (distinct xa_q 0) true) (not (= awq1_0 (+ aw_1_0 w_1)))) (or (and (distinct xa_q 1) true) (not (= awq1_1 (+ aw_1_1 w_1)))))))
 (let (($x301 (= t_bq1_0 bq1)))
 (let (($x305 (= wq1 t_wq1_0)))
 (let (($x306 (and $x305 (and (= awq1_0 t_awq1_0_0) (= awq1_1 t_awq1_0_1)) $x301)))
 (let (($x336 (and (ite (= xa_q 0) (= t_awq1_0_0 (+ awq0_0 pay_amount1_q)) (= t_awq1_0_0 awq0_0)) (ite (= xa_q 1) (= t_awq1_0_1 (+ awq0_1 pay_amount1_q)) (= t_awq1_0_1 awq0_1)))))
 (let (($x458 (= bq0 bq1)))
 (let (($x459 (= awq1_1 awq0_1)))
 (let (($x460 (= awq1_0 awq0_0)))
 (let (($x461 (and $x460 $x459)))
 (let (($x462 (= wq1 wq0)))
 (let (($x463 (and $x462 $x461 $x458)))
 (let (($x326 (>= pay_amount1_q 0)))
 (let (($x327 (not $x326)))
 (let (($x329 (= t_bq1_0 false)))
 (let (($x353 (and $x329 (ite $x327 $x463 (and (and (= t_wq1_0 (- wq0 pay_amount1_q)) $x336) $x306)))))
 (let (($x275 (and (ite (not (and (<= pay_amount1_q wq0) bq0)) $x463 (and (and $x353 $x306))))))
 (let (($x338 (= xn_q1 0)))
 (let (($x339 (not $x338)))
 (let (($x479 (ite (not (not bq0)) $x463 (and (and (= t_bq1_0 true) (and $x462 $x461 $x301))))))
 (let (($x348 (= f_q1 unlock)))
 (let (($x251 (and (and (>= xa_q 0) (<= xa_q 1) (>= xn_q1 0)) (and (>= awq0_0 0) (>= awq0_1 0)) (>= block_num_q1 block_num_q0) (ite $x348 (ite $x339 $x463 (and $x479)) (ite $x339 $x463 $x275)))))
 (let (($x490 (= t_bq0_0 bq0)))
 (let (($x494 (= wq0 t_wq0_0)))
 (let (($x495 (and $x494 (and (= awq0_0 t_awq0_0_0) (= awq0_1 t_awq0_0_1)) $x490)))
 (let (($x256 (and (ite (= xa_q 0) (= t_awq0_0_0 (+ aw_1_0 pay_amount0_q)) (= t_awq0_0_0 aw_1_0)) (ite (= xa_q 1) (= t_awq0_0_1 (+ aw_1_1 pay_amount0_q)) (= t_awq0_0_1 aw_1_1)))))
 (let (($x509 (= b_1 bq0)))
 (let (($x510 (= awq0_1 aw_1_1)))
 (let (($x511 (= awq0_0 aw_1_0)))
 (let (($x512 (and $x511 $x510)))
 (let (($x513 (= wq0 w_1)))
 (let (($x514 (and $x513 $x512 $x509)))
 (let (($x260 (ite (not (>= pay_amount0_q 0)) $x514 (and (and (= t_wq0_0 (- w_1 pay_amount0_q)) $x256) $x495))))
 (let (($x264 (ite (not (and (<= pay_amount0_q w_1) b_1)) $x514 (and (and (and (= t_bq0_0 false) $x260) $x495)))))
 (let (($x527 (= xn_q0 0)))
 (let (($x528 (not $x527)))
 (let (($x136 (not b_1)))
 (let (($x137 (not $x136)))
 (let (($x535 (and (ite $x137 $x514 (and (and (= t_bq0_0 true) (and $x513 $x512 $x490)))))))
 (let (($x537 (= f_q0 unlock)))
 (let (($x124 (>= aw_1_1 0)))
 (let (($x123 (>= aw_1_0 0)))
 (let (($x125 (and $x123 $x124)))
 (let (($x269 (and (and (>= xa_q 0) (<= xa_q 1) (>= xn_q0 0)) $x125 (>= block_num_q0 block_num_1) (ite $x537 (ite $x528 $x514 $x535) (ite $x528 $x514 (and $x264))))))
 (or (not $x269) (not $x251) $x319)))))))))))))))))))))))))))))))))))))))))))))
 ))
 (let (($x245 (<= xa_q 1)))
 (let (($x246 (>= xa_q 0)))
 (let (($x248 (and $x246 $x245)))
 (and $x248 true $x274))))))
 ))
 (and $x278)))
(check-sat)
